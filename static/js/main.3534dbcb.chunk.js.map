{"version":3,"sources":["context/settings.js","hooks/form.js","components/header/Header.js","components/form/Form.js","components/listItem/ListItem.js","components/list/List.js","components/viewOptions/viewOptions.js","components/todo/todo.js","app.js","index.js"],"names":["SettingsContext","React","createContext","Settings","props","useState","numberOfItems","setNumberOfItems","showCompleted","setCompleted","state","number","boolean","Provider","value","children","useForm","callback","values","setValues","handleChange","event","persist","target","name","handleSubmit","preventDefault","Header","id","Group","align","Alignment","LEFT","Heading","incomplete","Divider","Form","onSubmit","onChange","type","placeholder","defaultValue","min","max","ListItem","settings","useContext","interactive","elevation","Elevation","FOUR","item","text","assignee","difficulty","onClick","toggleComplete","complete","deleteItem","toString","List","currentPage","setPage","changePage","e","lastIndex","firstIndex","listItems","list","slice","map","length","ViewOptions","radioSelected","setRadioSelected","stringifiedObject","JSON","stringify","localStorage","setItem","label","console","log","currentTarget","selectedValue","parseInt","step","ToDo","setList","setIncomplete","uuid","includes","alert","useEffect","incompleteCount","filter","document","title","storage","getItem","parsedObject","parse","items","App","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3534dbcb.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n// our settings context singleton from which we can derive/ get access to our Provider\nexport const SettingsContext = React.createContext();\n\nfunction Settings(props) {\n\n  // In order for context behaviors to hook into our react application, we need to define them with useState hook\n  const [numberOfItems, setNumberOfItems] = useState(4);\n  const [showCompleted, setCompleted] = useState(false);\n\n  const state = {\n    numberOfItems,\n    showCompleted,\n    setNumberOfItems:(number) => {\n      setNumberOfItems(number);\n    },\n    setCompleted:(boolean) => {\n      setCompleted(boolean);\n    }\n  };\n\n  return (\n    <SettingsContext.Provider value={state}>\n      {props.children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport default Settings;\n","import { useState } from 'react';\n\nconst useForm = (callback) => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n    callback(values);\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;\n","import { Navbar, Alignment } from '@blueprintjs/core';\nimport './header.scss';\n\n\nfunction Header(props) {\n\n  return (\n    <Navbar id='navBar'>\n      <Navbar.Group align={Alignment.LEFT}>\n        <Navbar.Heading id='heading'>To Do List: {props.incomplete} items pending</Navbar.Heading>\n        <Navbar.Divider />\n      </Navbar.Group>\n    </Navbar>\n  );\n}\n\nexport default Header;\n\n","import './form.scss';\n\nfunction Form(props) {\n\n\n  return (\n    <>\n      <form onSubmit={props.handleSubmit}>\n        <h2>Add To Do Item</h2>\n        <label>\n          <span>To Do Item</span>\n          <input onChange={props.handleChange} name=\"text\" type=\"text\" placeholder=\"Item Details\" />\n        </label>\n        <label>\n          <span>Assigned To</span>\n          <input onChange={props.handleChange} name=\"assignee\" type=\"text\" placeholder=\"Assignee Name\" />\n        </label>\n        <label>\n          <span>Difficulty</span>\n          <input onChange={props.handleChange} defaultValue={3} type=\"range\" min={1} max={5} name=\"difficulty\" />\n        </label>\n        <label>\n          <button type=\"submit\">Add Item</button>\n        </label>\n      </form>\n    </>\n  );\n}\n\nexport default Form;\n","import React from 'react';\nimport { Button, Card, Elevation } from '@blueprintjs/core';\nimport { useContext } from 'react';\nimport { SettingsContext } from '../../context/settings.js';\nimport './listItem.scss';\n\nconst ListItem = (props) => {\n  const settings = useContext(SettingsContext);\n  settings;\n\n  function handleComplete() {\n    props.toggleComplete(props.item.id);\n    if (props.item.complete === true && settings.showCompleted === 'false') {\n      props.deleteItem(props.item.id);\n    }\n  }\n\n  return (\n    <Card id='todoCard' interactive={true} elevation={Elevation.FOUR} key={props.item.id}>\n      <h5>{props.item.text}</h5>\n      <p><small>Assigned to: {props.item.assignee}</small></p>\n      <p><small>Difficulty: {props.item.difficulty}</small></p>\n      <Button id=\"complete\" onClick={handleComplete}>Complete: {props.item.complete.toString()}\n      </Button>\n      <Button id=\"delete\" onClick={() => props.deleteItem(props.item.id)}>Delete</Button>\n    </Card>\n  );\n};\n\nexport default ListItem;\n","import { useContext, useState } from 'react';\nimport { SettingsContext } from '../../context/settings.js';\nimport ListItem from '../listItem/ListItem.js';\nimport './list.scss';\n\nfunction List(props) {\n\n  // pass our context singleton into our useContext hook\n  const settings = useContext(SettingsContext);\n  const [currentPage, setPage] = useState(1);\n\n  function changePage(e) {\n    if (e.target.id === 'next') {\n      setPage(currentPage + 1);\n      return;\n    } else if (e.target.id === 'prev') {\n      setPage(currentPage - 1);\n      return;\n    }\n    return;\n  }\n\n  const lastIndex = currentPage * settings.numberOfItems;\n  const firstIndex = lastIndex - settings.numberOfItems;\n  const listItems = props.list.slice(firstIndex, lastIndex);\n\n  return (\n    <>\n      <div id='cardContainer'>\n        {listItems.map(item => (\n          <ListItem key = {item.id} item={item} toggleComplete={props.toggleComplete} deleteItem={props.deleteItem} />\n        ))}\n      </div>\n      <div id=\"nextPrevButtons\">\n        {currentPage > 1 ? (\n          <button id=\"prev\" onClick={changePage} type=\"button\">\n            Back\n          </button>\n        ) : null}\n        {props.list.length > settings.numberOfItems ? (\n          <button id=\"next\" onClick={changePage} type=\"button\">\n            Next\n          </button>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default List;\n","import { useContext, useState } from 'react';\nimport { SettingsContext } from '../../context/settings.js';\nimport { RadioGroup, Radio } from '@blueprintjs/core';\nimport './viewOptions.scss';\n\nfunction ViewOptions() {\n  // pass our context singleton into our useContext hook\n  const settings = useContext(SettingsContext);\n  settings;\n\n  const [radioSelected, setRadioSelected] = useState(false);\n\n  function handleRadioChange(e) {\n    settings.setCompleted(e.target.value);\n    console.log(settings.showCompleted);\n    setRadioSelected(e.currentTarget.value);\n  }\n\n  function handleInputChange(e) {\n    settings.setNumberOfItems(parseInt(e.target.value));\n  }\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n    // put items in storage\n    let stringifiedObject = JSON.stringify({ numberOfItems: settings.numberOfItems, showCompleted: settings.showCompleted });\n    localStorage.setItem('userPreferences', stringifiedObject);\n  }\n\n\n  return (\n    <>\n      <form onSubmit={handleFormSubmit}>\n        <h2>Change Your View</h2>\n        <RadioGroup\n          label=\"Show Completed Tasks?\"\n          onChange={handleRadioChange}\n          selectedValue={radioSelected}\n        >\n          <Radio label=\"Yes\" value='true' />\n          <Radio label=\"No\" value='false' />\n        </RadioGroup>\n        <label>\n          <span>Tasks per page</span>\n          <input onChange={handleInputChange} min=\"0\" step=\"1\" name=\"tasksPerPage\" type=\"number\" />\n        </label>\n        <label>\n          <button type=\"submit\">Add Item</button>\n        </label>\n      </form>\n    </>\n  );\n}\n\n\n\nexport default ViewOptions;\n","import React, { useEffect, useState, useContext } from 'react';\nimport useForm from '../../hooks/form.js';\nimport { v4 as uuid } from 'uuid';\nimport Header from '../header/Header.js';\nimport Form from '../form/Form.js';\nimport List from '../list/List.js';\nimport ViewOptions from '../viewOptions/viewOptions.js';\nimport { SettingsContext } from '../../context/settings.js';\nimport './todo.scss';\n\nconst ToDo = () => {\n  const settings = useContext(SettingsContext);\n  settings;\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem);\n\n  function addItem(item) {\n    item.id = uuid();\n    item.complete = false;\n\n    if (!list.includes(item)) {\n      setList([...list, item]);\n    } else {\n      alert('That to-do item already exsists!');\n    }\n  }\n\n  function deleteItem(id) {\n    const items = list.filter(item => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n\n    const items = list.map(item => {\n      if (item.id === id) {\n        item.complete = !item.complete;\n      }\n      return item;\n    });\n\n    setList(items);\n\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n\n\n  useEffect(() => {\n    // pull user preferences from storage on page load\n    let storage = localStorage.getItem('userPreferences');\n    if (storage) {\n      let parsedObject = JSON.parse(storage);\n      console.log('local storage', parsedObject);\n      settings.setNumberOfItems(parsedObject.numberOfItems);\n      settings.setCompleted(parsedObject.showCompleted);\n    }\n  }, []);\n\n  return (\n    <>\n      <Header incomplete={incomplete} />\n      <div id=\"formContainer\">\n        <ViewOptions />\n        <Form handleSubmit={handleSubmit} handleChange={handleChange} />\n      </div>\n      <List list={list} toggleComplete={toggleComplete} deleteItem={deleteItem} />\n    </>\n  );\n};\n\nexport default ToDo;\n","import React from 'react';\nimport './app.scss';\nimport ToDo from './components/todo/todo.js';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <ToDo />\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Settings from './context/settings.js';\nimport App from './app.js';\nimport 'normalize.css/normalize.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Settings>\n      <App />\n    </Settings>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n"],"sourceRoot":""}